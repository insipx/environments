{ pkgsAndroid, ... }:

let
  pkgs = pkgsAndroid;
  inherit (pkgs.stdenv) isDarwin;
  inherit (pkgs.darwin.apple_sdk) frameworks;
  inherit (pkgs) androidenv;
  inherit (androidComposition) androidsdk platform-tools;
  android = {
    platforms = [ "27" "31" "33" "34" "35" ];
    systemImageTypes = [ "google_apis" "google_apis_playstore" "default" ];
    abis = [ "arm64-v8a" ];
  };

  sdkArgs = {
    inherit (android) systemImageTypes;
    platformVersions = android.platforms;
    abiVersions = android.abis;
    buildToolsVersions = [ "30.0.3" "35.0.0" ];
    includeSystemImages = false;
    includeEmulator = false;

    # Accepting more licenses declaratively:
    extraLicenses = [
      # These aren't, but are useful for more uncommon setups.
      "android-sdk-preview-license"
      "android-googletv-license"
      "android-sdk-arm-dbt-license"
      "google-gdk-license"
      "intel-android-extra-license"
      "intel-android-sysimage-license"
      "mips-android-sysimage-license"
    ];
  };

  androidHome = "${androidComposition.androidsdk}/libexec/android-sdk";
  androidComposition = androidenv.composeAndroidPackages sdkArgs;
  androidEmulator = androidenv.emulateApp {
    name = "libxmtp-integration-tests";
    platformVersion = "31";
    abiVersion = "arm64-v8a";
    systemImageType = "default";
    # androidEmulatorFlags = "-gpu swiftshader_indirect -accel hvf -no-snapshot-load";
    configOptions = {
      "hw.ramSize" = "2048"; # Allocate 2GB of RAM, increase if needed
      "hw.keyboard" = "yes";
    };
    sdkExtraArgs = sdkArgs;
  };

  # Android Studio Compatiblity
  #shellHook = ''
  #  # Write out local.properties for Android Studio.
  #  cat <<EOF > local.properties
  #  # This file was automatically generated by nix-shell.
  #  sdk.dir=$ANDROID_SDK_ROOT
  #  ndk.dir=$ANDROID_NDK_ROOT
  #  EOF
  #'';
in
pkgs.mkShell {
  # inherit shellHook;
  ANDROID_HOME = "${androidHome}";
  ANDROID_SDK_ROOT = "${androidHome}";
  ANDROID_NDK_ROOT = "${androidHome}/ndk-bundle";
  TEST_EMU = androidEmulator;
  JAVA_HOME = pkgs.jdk17.home;
  packages = [ androidsdk pkgs.jdk17 ];
  nativeBuildInputs = with pkgs; [ androidsdk jdk17 ];
  buildInputs = with pkgs;
    [
      # emu
      # linters
      mktemp
      kotlin
      shellcheck
      buf
      curl
      protobuf
      protoc-gen-prost-crate
      protolint
      gradle
    ] ++ lib.optionals isDarwin [
      libiconv
      frameworks.CoreServices
      darwin.cctools
    ];
}
